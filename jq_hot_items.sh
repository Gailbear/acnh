cat acnh_items_fixed.json | jq 'def reduce_mats($crafted_mats): . as $megaItems | map(. + {computed_mats: (.computed_mats | to_entries | map(. as $mat | .key | if in($crafted_mats) then ($megaItems | map(select(.name == $mat.key))[0].materials | to_entries) else $mat end ) | flatten | (map({(.key): 0}) | add) as $initVal | reduce .[] as $mat ($initVal; . | .[$mat.key] +=  $mat.value) ) }); acnh as $items | $items | group_by(.name) | map(select(length > 1))| map(.[0] + {materials: .[1].materials}) | map(select(.dIY)) | map(. + {materials:  .materials |  map({key: .itemName, value: .count}) | from_entries}) | . as $megaItems | (map({(.name): 1}) | add) as $names | map(.materials) | add |  with_entries(select(.key | in($names))) as $crafted_mats | with_entries(select(.key | in($crafted_mats) | not)) as $missing_mats | $items | map(select(.name | in($missing_mats))) as $addl_items | $megaItems | map(. + {computed_mats: .materials}) | reduce_mats($crafted_mats) | map(select(.computed_mats)) | ($crafted_mats | del(.["Document stack"])) as $new_cm | reduce_mats($new_cm) | ($megaItems + $addl_items + [{name: "Bells", sell: 1}] | map({(.name): .}) | add) as $itemsDict | map(. + {mats_price: (.computed_mats | with_entries({key: .key, value: $itemsDict[.key].sell}))}) | map(. + {mat_sell: (.computed_mats as $mats | .mats_price | to_entries | reduce .[] as $mat(0; . + $mat.value * $mats[$mat.key]))}) | map(select(.dIY)) | map({name: .name, mats: .computed_mats, hot_price: ((.sell // 0)* 2), mat_sell: .mat_sell, ratio: ((.sell // 0) * 2 / .mat_sell)})' > hot_items.json

